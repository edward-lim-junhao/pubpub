// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator comments {
  provider = "pnpm exec tsx prisma/comment-generator.ts"
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  supabaseId   String?  @unique
  slug         String   @unique
  email        String   @unique
  firstName    String
  lastName     String?
  orcid        String?
  avatar       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  isSuperAdmin Boolean  @default(false)

  claims       ActionClaim[]
  moves        ActionMove[]
  memberships  Member[]
  memberGroups MemberGroup[]
  AuthToken    AuthToken[]
  assignedPubs Pub[]
  actionRuns   ActionRun[]

  @@map(name: "users")
}

model AuthToken {
  id        String   @id @default(cuid())
  hash      String
  createdAt DateTime @default(now())
  expiresAt DateTime // Tokens expire within 1 week...
  isUsed    Boolean  @default(false) // ...or after one use
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map(name: "auth_tokens")
}

model Community {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  slug      String   @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  pubTypes             PubType[]
  pubs                 Pub[]
  integrationInstances IntegrationInstance[]
  members              Member[]
  memberGroups         MemberGroup[]
  stages               Stage[]

  @@map(name: "communities")
}

model Pub {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  valuesBlob  Json?
  pubType     PubType   @relation(fields: [pubTypeId], references: [id])
  pubTypeId   String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  assigneeId  String?
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  parent   Pub?    @relation("pub_parent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children Pub[]   @relation("pub_parent")

  values                   PubValue[]
  stages                   PubsInStages[]
  claims                   ActionClaim[]
  moves                    ActionMove[]
  integrationInstances     IntegrationInstance[]
  permissions              Permission[]
  IntegrationInstanceState IntegrationInstanceState[]
  actionRuns               ActionRun[]

  @@map(name: "pubs")
}

model PubField {
  id               String          @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  slug             String          @unique
  integration      Integration?    @relation(fields: [integrationId], references: [id])
  integrationId    String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  schema           PubFieldSchema? @relation(fields: [pubFieldSchemaId], references: [id])
  pubFieldSchemaId String?

  values    PubValue[]
  pubTypes  PubType[]
  FormInput FormInput[]

  @@map(name: "pub_fields")
}

model PubFieldSchema {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  namespace String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // This must be a dereferenced JSONSchema. We should find a way to validate.
  schema    Json
  PubFields PubField[]

  @@unique([name, namespace], name: "schema_identifier")
}

model PubValue {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  field     PubField @relation(fields: [fieldId], references: [id])
  fieldId   String
  value     Json
  pub       Pub      @relation(fields: [pubId], references: [id], onDelete: Cascade)
  pubId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Add userId and integrationId to track who created the value

  @@map(name: "pub_values")
}

model PubType {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  fields PubField[]
  pubs   Pub[]
  Form   Form[]

  @@map(name: "pub_types")
}

model Stage {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  order       String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  pubs                  PubsInStages[]
  moveConstraints       MoveConstraint[]      @relation("move_constraint")
  moveConstraintSources MoveConstraint[]      @relation("move_constraint_destination")
  claims                ActionClaim[]
  movesFrom             ActionMove[]          @relation("move_source_stage")
  movesTo               ActionMove[]          @relation("move_destination_stage")
  integrationInstances  IntegrationInstance[]
  permissions           Permission[]
  actionInstances       ActionInstance[]

  @@map(name: "stages")
}

model PubsInStages {
  pub     Pub    @relation(fields: [pubId], references: [id], onDelete: Cascade)
  pubId   String
  stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId String

  @@id([pubId, stageId])
}

model MoveConstraint {
  stage         Stage    @relation("move_constraint", fields: [stageId], references: [id], onDelete: Cascade)
  stageId       String
  destination   Stage    @relation("move_constraint_destination", fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@id([stageId, destinationId], name: "moveConstraintId")
  @@map(name: "move_constraint")
}

model ActionClaim {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  stage      Stage     @relation(fields: [stageId], references: [id])
  stageId    String
  pub        Pub       @relation(fields: [pubId], references: [id])
  pubId      String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  releasedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@map(name: "action_claim")
}

model ActionMove {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  sourceStage        Stage    @relation("move_source_stage", fields: [sourceStageId], references: [id])
  sourceStageId      String
  destinationStage   Stage    @relation("move_destination_stage", fields: [destinationStageId], references: [id])
  destinationStageId String
  pub                Pub      @relation(fields: [pubId], references: [id])
  pubId              String
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  note               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  @@map(name: "action_move")
}

model Member {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  canAdmin    Boolean // Community-wide administrator
  // If admin, the permissions are irrelevant because they have acccess to everything, but we
  // may want to keep the permissions around (though grayed our and with a note?) in case their
  // admin status is ever removed.
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  permissions Permission[]

  @@map(name: "members")
}

model MemberGroup {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  canAdmin    Boolean // Community-wide administrator
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  permissions Permission[]
  users       User[]

  @@map(name: "member_groups")
}

model Permission {
  // This is essentially a 'role' - we just don't allow you to name it and repeatedly
  // use it across different members and groups. Wouldn't be too hard to adapt to that
  // in the future though.
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  // Specific permission options here
  // fields - if empty array, all fields
  // integrations - if empty array, all integrations
  // workflow actions? - can they move and claim?
  member        Member?      @relation(fields: [memberId], references: [id])
  memberId      String?
  memberGroup   MemberGroup? @relation(fields: [memberGroupId], references: [id])
  memberGroupId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  // We don't have a way in this right now to say 'All pubs in a community' or 'all pubs in a workflow'.
  // Our assumption is that the former should just be a community admin, and the latter should just have
  // access to some parent pub whose children are the contents of a workflow. If that winds up being
  // a bad assumption, wouldn't be too hard to add a `workflows Workflow[]` value below.

  pubs   Pub[]
  stages Stage[]

  @@map(name: "permissions")
}

model Integration {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  actions     Json
  settingsUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  instances IntegrationInstance[]
  pubFields PubField[]

  @@map(name: "integrations")
}

model IntegrationInstance {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String
  community     Community   @relation(fields: [communityId], references: [id])
  communityId   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  stage         Stage?      @relation(fields: [stageId], references: [id])
  stageId       String?
  config        Json?

  pubs                     Pub[]
  IntegrationInstanceState IntegrationInstanceState[]

  @@map(name: "integration_instances")
}

model IntegrationInstanceState {
  pub        Pub                 @relation(fields: [pubId], references: [id])
  pubId      String
  instance   IntegrationInstance @relation(fields: [instanceId], references: [id])
  instanceId String
  state      Json

  @@unique([pubId, instanceId], name: "pub_instance")
}

model ActionInstance {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  name      String      @default("")
  action    Action
  stage     Stage       @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  config    Json?
  rules     Rule[]
  runs      ActionRun[]

  @@map(name: "action_instances")
}

enum Action {
  log
  pdf
  email
  pushToV6
  http
  move
}

model ActionRun {
  id               String          @id @default(dbgenerated("gen_random_uuid()"))
  actionInstance   ActionInstance? @relation(fields: [actionInstanceId], references: [id], onDelete: Cascade)
  actionInstanceId String?
  pub              Pub?            @relation(fields: [pubId], references: [id])
  pubId            String?
  config           Json?
  event            Event?
  params           Json?
  status           ActionRunStatus
  result           Json
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  @@map(name: "action_runs")
}

enum ActionRunStatus {
  scheduled
  success
  failure
}

model Rule {
  id               String         @id @default(dbgenerated("gen_random_uuid()"))
  event            Event
  actionInstance   ActionInstance @relation(fields: [actionInstanceId], references: [id], onDelete: Cascade)
  actionInstanceId String
  config           Json? /// @type(RuleConfigs, '~/actions/types', true, false, true)

  @@unique([actionInstanceId, event])
  @@map(name: "rules")
}

enum Event {
  pubEnteredStage
  pubLeftStage
  pubInStageForDuration
}

model Form {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  pubType   PubType     @relation(fields: [pubTypeId], references: [id])
  pubTypeId String
  inputs    FormInput[]

  @@map(name: "forms")
}

model FormInput {
  id       String   @id @default(dbgenerated("gen_random_uuid()"))
  fieldId  String
  field    PubField @relation(fields: [fieldId], references: [id])
  formId   String
  order    String
  label    String
  required Boolean
  form     Form     @relation(fields: [formId], references: [id])
  isSubmit Boolean  @map(name: "isSubmit") // This column has a unique index preventing multiple rows with isSubmit per formId (core/prisma/migrations/20240529145416_add_forms)

  @@map(name: "form_inputs")
}
