# Based on https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service

name: PR Updated triggers

on:
    pull_request:
        types:
            - opened
            - synchronize

env:
    AWS_REGION: us-east-1

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            # - name: Configure AWS credentials
            #   uses: aws-actions/configure-aws-credentials@v4
            #   with:
            #       role-to-assume: ${{ vars.IAM_ROLE_TO_ASSUME }}
            #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            #       aws-region: ${{ env.AWS_REGION }}

            # - name: Login to Amazon ECR
            #   id: login-ecr
            #   uses: aws-actions/amazon-ecr-login@v2

            - name: up
              run: docker compose -f docker-compose.test.yml up integration-tests -d

            - name: netstat
              run: docker compose -f docker-compose.test.yml exec integration-tests sh -c "netstat -nultp"

            # - name: local-curl
            #   run: docker compose -f docker-compose.test.yml
            - name: curl
              run: curl http://172.18.0.4:3000

    # ci:
    #     uses: ./.github/workflows/ci.yml
    #     secrets:
    #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    # build-all:
    #     uses: ./.github/workflows/ecrbuild-all.yml
    #     secrets:
    #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    # e2e:
    #     needs:
    #         - build-all
    #         # could theoretically be skipped
    #         - ci
    #     uses: ./.github/workflows/e2e.yml
    #     secrets:
    #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

    # integration-tests:
    #     needs:
    #         - build-all
    #         - ci
    #     name: Integration tests
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4

    #         - name: Configure AWS credentials
    #           uses: aws-actions/configure-aws-credentials@v4
    #           with:
    #               role-to-assume: ${{ vars.IAM_ROLE_TO_ASSUME }}
    #               aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #               aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #               aws-region: ${{ env.AWS_REGION }}

    #         - name: Get image tag based on SHA
    #           id: gettag
    #           # use shell substitution
    #           run: echo "tag=$(git describe --always --abbrev=40 --dirty)" >> $GITHUB_OUTPUT

    #         - name: Login to Amazon ECR
    #           id: login-ecr
    #           uses: aws-actions/amazon-ecr-login@v2

    #         - name: Get image labels
    #           id: label
    #           env:
    #               ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #               IMAGE_TAG: ${{ steps.gettag.outputs.tag }}
    #           run: |
    #               echo "label=$ECR_REGISTRY/${ECR_REPOSITORY_NAME_OVERRIDE:-$ECR_REPOSITORY_PREFIX-${CONTAINER_NAME}}:$IMAGE_TAG" >> $GITHUB_OUTPUT
    #               echo "base_label=$ECR_REGISTRY/$ECR_REPOSITORY_PREFIX:$IMAGE_TAG" >> $GITHUB_OUTPUT

    #         - name: Build compose
    #           run: INTEGRATION_TESTS_IMAGE=${{ steps.label.outputs.label }} docker compose -f docker-compose.test.yml --profile integration build

    #         - name: Run integration tests
    #           run: docker compose -f docker-compose.test.yml --profile integration run integration-tests
