import { type ColumnType, type Insertable, type Selectable, type Updateable } from "kysely";
import { z } from "zod";

import type { ApiAccessTokensId } from "./ApiAccessTokens";
import type { default as ApiAccessTokenScope } from "./ApiAccessTokenScope";
import type { default as ApiAccessType } from "./ApiAccessType";
import { type ApiAccessRuleConstraints } from "../types";
import { apiAccessTokensIdSchema } from "./ApiAccessTokens";
import { apiAccessTokenScopesSchema } from "./ApiAccessTokenScope";
import { apiAccessTypeSchema } from "./ApiAccessType";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Identifier type for public.api_access_rules */
export type ApiAccessRulesId = string & { __brand: "ApiAccessRulesId" };

/** Represents the table public.api_access_rules */
export default interface ApiAccessRulesTable {
	id: ColumnType<ApiAccessRulesId, ApiAccessRulesId | undefined, ApiAccessRulesId>;

	apiAccessTokenId: ColumnType<ApiAccessTokensId, ApiAccessTokensId, ApiAccessTokensId>;

	objectType: ColumnType<ApiAccessTokenScope, ApiAccessTokenScope, ApiAccessTokenScope>;

	objectId: ColumnType<number | null, number | null, number | null>;

	accessType: ColumnType<ApiAccessType, ApiAccessType, ApiAccessType>;

	constraints: ColumnType<
		ApiAccessRuleConstraints | null,
		ApiAccessRuleConstraints | null,
		ApiAccessRuleConstraints | null
	>;
}

export type ApiAccessRules = Selectable<ApiAccessRulesTable>;

export type NewApiAccessRules = Insertable<ApiAccessRulesTable>;

export type ApiAccessRulesUpdate = Updateable<ApiAccessRulesTable>;

export const apiAccessRulesIdSchema = z.string().uuid() as unknown as z.Schema<ApiAccessRulesId>;

export const apiAccessRulesSchema = z.object({
	id: apiAccessRulesIdSchema,
	apiAccessTokenId: apiAccessTokensIdSchema,
	objectType: apiAccessTokenScopesSchema,
	objectId: z.number().nullable(),
	accessType: apiAccessTypeSchema,
	constraints: z.unknown().nullable(),
}) as z.ZodObject<{ [K in keyof ApiAccessRules]: z.Schema<ApiAccessRules[K]> }>;

export const apiAccessRulesInitializerSchema = z.object({
	id: apiAccessRulesIdSchema.optional(),
	apiAccessTokenId: apiAccessTokensIdSchema,
	objectType: apiAccessTokenScopesSchema,
	objectId: z.number().optional().nullable(),
	accessType: apiAccessTypeSchema,
	constraints: z.unknown().optional().nullable(),
}) as z.ZodObject<{ [K in keyof NewApiAccessRules]: z.Schema<NewApiAccessRules[K]> }>;

export const apiAccessRulesMutatorSchema = z.object({
	id: apiAccessRulesIdSchema.optional(),
	apiAccessTokenId: apiAccessTokensIdSchema.optional(),
	objectType: apiAccessTokenScopesSchema.optional(),
	objectId: z.number().optional().nullable(),
	accessType: apiAccessTypeSchema.optional(),
	constraints: z.unknown().optional().nullable(),
}) as z.ZodObject<{ [K in keyof ApiAccessRulesUpdate]: z.Schema<ApiAccessRulesUpdate[K]> }>;
