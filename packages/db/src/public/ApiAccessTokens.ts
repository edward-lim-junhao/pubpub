import { type ColumnType, type Insertable, type Selectable, type Updateable } from "kysely";
import { z } from "zod";

import type { CommunitiesId } from "./Communities";
import { communitiesIdSchema } from "./Communities";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Identifier type for public.api_access_tokens */
export type ApiAccessTokensId = string & { __brand: "ApiAccessTokensId" };

/** Represents the table public.api_access_tokens */
export default interface ApiAccessTokensTable {
	id: ColumnType<ApiAccessTokensId, ApiAccessTokensId | undefined, ApiAccessTokensId>;

	token: ColumnType<string, string, string>;

	name: ColumnType<string, string, string>;

	communityId: ColumnType<CommunitiesId, CommunitiesId, CommunitiesId>;

	expiration: ColumnType<Date, Date | string, Date | string>;

	revoked: ColumnType<boolean, boolean | undefined, boolean>;

	issuedBy: ColumnType<string, string, string>;

	issuedAt: ColumnType<Date, Date | string | undefined, Date | string>;

	usageLimit: ColumnType<number | null, number | null, number | null>;

	usages: ColumnType<number, number | undefined, number>;
}

export type ApiAccessTokens = Selectable<ApiAccessTokensTable>;

export type NewApiAccessTokens = Insertable<ApiAccessTokensTable>;

export type ApiAccessTokensUpdate = Updateable<ApiAccessTokensTable>;

export const apiAccessTokensIdSchema = z.string().uuid() as unknown as z.Schema<ApiAccessTokensId>;

export const apiAccessTokensSchema = z.object({
	id: apiAccessTokensIdSchema,
	token: z.string(),
	name: z.string(),
	communityId: communitiesIdSchema,
	expiration: z.date(),
	revoked: z.boolean(),
	issuedBy: z.string(),
	issuedAt: z.date(),
	usageLimit: z.number().nullable(),
	usages: z.number(),
}) as z.ZodObject<{ [K in keyof ApiAccessTokens]: z.Schema<ApiAccessTokens[K]> }>;

export const apiAccessTokensInitializerSchema = z.object({
	id: apiAccessTokensIdSchema.optional(),
	token: z.string(),
	name: z.string(),
	communityId: communitiesIdSchema,
	expiration: z.date(),
	revoked: z.boolean().optional(),
	issuedBy: z.string(),
	issuedAt: z.date().optional(),
	usageLimit: z.number().optional().nullable(),
	usages: z.number().optional(),
}) as z.ZodObject<{ [K in keyof NewApiAccessTokens]: z.Schema<NewApiAccessTokens[K]> }>;

export const apiAccessTokensMutatorSchema = z.object({
	id: apiAccessTokensIdSchema.optional(),
	token: z.string().optional(),
	name: z.string().optional(),
	communityId: communitiesIdSchema.optional(),
	expiration: z.date().optional(),
	revoked: z.boolean().optional(),
	issuedBy: z.string().optional(),
	issuedAt: z.date().optional(),
	usageLimit: z.number().optional().nullable(),
	usages: z.number().optional(),
}) as z.ZodObject<{ [K in keyof ApiAccessTokensUpdate]: z.Schema<ApiAccessTokensUpdate[K]> }>;
