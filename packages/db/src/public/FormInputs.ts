import { type ColumnType, type Insertable, type Selectable, type Updateable } from "kysely";
import { z } from "zod";

import type { FormsId } from "./Forms";
import type { PubFieldsId } from "./PubFields";
import { formsIdSchema } from "./Forms";
import { pubFieldsIdSchema } from "./PubFields";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Identifier type for public.form_inputs */
export type FormInputsId = string & { __brand: "FormInputsId" };

/** Represents the table public.form_inputs */
export interface FormInputsTable {
	id: ColumnType<FormInputsId, FormInputsId | undefined, FormInputsId>;

	fieldId: ColumnType<PubFieldsId, PubFieldsId, PubFieldsId>;

	formId: ColumnType<FormsId, FormsId, FormsId>;

	order: ColumnType<string, string, string>;

	label: ColumnType<string, string, string>;

	required: ColumnType<boolean, boolean, boolean>;

	isSubmit: ColumnType<boolean, boolean, boolean>;
}

export type FormInputs = Selectable<FormInputsTable>;

export type NewFormInputs = Insertable<FormInputsTable>;

export type FormInputsUpdate = Updateable<FormInputsTable>;

export const formInputsIdSchema = z.string().uuid() as unknown as z.Schema<FormInputsId>;

export const formInputsSchema = z.object({
	id: formInputsIdSchema,
	fieldId: pubFieldsIdSchema,
	formId: formsIdSchema,
	order: z.string(),
	label: z.string(),
	required: z.boolean(),
	isSubmit: z.boolean(),
});

export const formInputsInitializerSchema = z.object({
	id: formInputsIdSchema.optional(),
	fieldId: pubFieldsIdSchema,
	formId: formsIdSchema,
	order: z.string(),
	label: z.string(),
	required: z.boolean(),
	isSubmit: z.boolean(),
});

export const formInputsMutatorSchema = z.object({
	id: formInputsIdSchema.optional(),
	fieldId: pubFieldsIdSchema.optional(),
	formId: formsIdSchema.optional(),
	order: z.string().optional(),
	label: z.string().optional(),
	required: z.boolean().optional(),
	isSubmit: z.boolean().optional(),
});
