import { type ColumnType, type Insertable, type Selectable, type Updateable } from "kysely";
import { z } from "zod";

import type { IntegrationInstancesId } from "./IntegrationInstances";
import type { PubsId } from "./Pubs";
import { integrationInstancesIdSchema } from "./IntegrationInstances";
import { pubsIdSchema } from "./Pubs";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Represents the table public._IntegrationInstanceToPub */
export default interface IntegrationInstanceToPubTable {
	A: ColumnType<IntegrationInstancesId, IntegrationInstancesId, IntegrationInstancesId>;

	B: ColumnType<PubsId, PubsId, PubsId>;
}

export type IntegrationInstanceToPub = Selectable<IntegrationInstanceToPubTable>;

export type NewIntegrationInstanceToPub = Insertable<IntegrationInstanceToPubTable>;

export type IntegrationInstanceToPubUpdate = Updateable<IntegrationInstanceToPubTable>;

export const integrationInstanceToPubSchema = z.object({
	A: integrationInstancesIdSchema,
	B: pubsIdSchema,
}) as z.ZodObject<{ [K in keyof IntegrationInstanceToPub]: z.Schema<IntegrationInstanceToPub[K]> }>;

export const integrationInstanceToPubInitializerSchema = z.object({
	A: integrationInstancesIdSchema,
	B: pubsIdSchema,
}) as z.ZodObject<{
	[K in keyof NewIntegrationInstanceToPub]: z.Schema<NewIntegrationInstanceToPub[K]>;
}>;

export const integrationInstanceToPubMutatorSchema = z.object({
	A: integrationInstancesIdSchema.optional(),
	B: pubsIdSchema.optional(),
}) as z.ZodObject<{
	[K in keyof IntegrationInstanceToPubUpdate]: z.Schema<IntegrationInstanceToPubUpdate[K]>;
}>;
