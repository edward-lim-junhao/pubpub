import { type ColumnType, type Insertable, type Selectable, type Updateable } from "kysely";
import { z } from "zod";

import type { UsersId } from "./Users";
import { usersIdSchema } from "./Users";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Identifier type for public.Session */
export type SessionId = string & { __brand: "SessionId" };

/** Represents the table public.Session */
export interface SessionTable {
	id: ColumnType<SessionId, SessionId | undefined, SessionId>;

	userId: ColumnType<UsersId, UsersId, UsersId>;

	expiresAt: ColumnType<Date, Date | string, Date | string>;

	fresh: ColumnType<boolean, boolean | undefined, boolean>;

	createdAt: ColumnType<Date, Date | string | undefined, Date | string>;

	updatedAt: ColumnType<Date, Date | string | undefined, Date | string>;
}

export type Session = Selectable<SessionTable>;

export type NewSession = Insertable<SessionTable>;

export type SessionUpdate = Updateable<SessionTable>;

export const sessionIdSchema = z.string().uuid() as unknown as z.Schema<SessionId>;

export const sessionSchema = z.object({
	id: sessionIdSchema,
	userId: usersIdSchema,
	expiresAt: z.date(),
	fresh: z.boolean(),
	createdAt: z.date(),
	updatedAt: z.date(),
});

export const sessionInitializerSchema = z.object({
	id: sessionIdSchema.optional(),
	userId: usersIdSchema,
	expiresAt: z.date(),
	fresh: z.boolean().optional(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
});

export const sessionMutatorSchema = z.object({
	id: sessionIdSchema.optional(),
	userId: usersIdSchema.optional(),
	expiresAt: z.date().optional(),
	fresh: z.boolean().optional(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
});
